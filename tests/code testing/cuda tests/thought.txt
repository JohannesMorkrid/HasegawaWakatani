Conditional us of CUDA, should happend inside the structs and not outside:
https://cuda.juliagpu.org/stable/installation/conditional/

CUDA.@sync 
CuArray
kernel launch via @cuda

When you don't get the performance you expect, usually your first step should be to profile 

cuStreamSynchronize seems to be slow
Should also check number of blocks and threads!
May end up using only a single block with a single thread with just applying @cuda to a kernel

Parallelize means assigning different tasks to different threads

Each thread gets a unique id: threadIdx
And there are blockDim.x,.y and .z
blockDim is a 3-dimensional structure
blockIdx also
There is also gridDim?

threadIdx().x and blockDim.x does not necessarily start at 0 or 1

println() is not supported in CUDA kernels, instead use @cuprintf also needs to use %lld and \n

streaming multiprocessor + threads = speed

Indexing is very important for parallization, used to access cuArray elements? So strides are also useful
Given number of threads can compute number of blocks

Choosing number of threads and blocks to saturate the GPU can be automated by:
launch configuration API. This API takes a compiled (but not launched) kernel, 
returns a tuple with an upper bound on the number of threads, 
and the minimum number of blocks that are required to fully saturate the GPU

Better to use @cuprint and @cuprintln
